rule statement {
    | <matrix_literal> = <accessor>
    # [a, b, c] = foo(x)
    # [a, b, c] = foo
    # BUT NOT
    # [1, 2, 3] = foo(x)  <-- Probably a runtime error
    # [a, b, 3] = foo(x)  <-- Probably a runtime error
    # --------------------------------------------------
    # _matrix_literal = !build_matrix_literal(elements)
    # _nargsout = _matrix_literal.'get_nargs'()
    # _accessor = !build_accessor(args)
    # _result = _accessor.'get_result'(_nargsout)
    # _matrix_literal.'assign_result'(_result)

    | <accessor> = <accessor>
    # foo(x) = bar(y)
    # foo = bar(y)
    # foo(x) = bar
    # --------------------------------------------------
    # _accessor1 = !build_accessor(args1)
    # _nargsout = _accessor1.'get_nargs'() # always == 1
    # _accessor2 = !build_accessor(args2)
    # _result = _accessor.'get_result'(_nargsout)
    # _accessor.'assign_result'(_result)

    | <accessor> = <matrix_literal>
    # foo(x) = [a, b, c]
    # foo(x) = [1, 2, 3]
    # foo = [a, b, c]
    # foo = [1, 2, 3]
    # --------------------------------------------------
    # _accessor = !build_accessor(args)
    # _nargsout = accessor.'get_nargs'() # always == 1
    # _matrix_literal = !build_matrix_literal(elements)
    # _result = _matrix_literal.'get_result'(_nargsout)
    # _accessor.'assign_result'(_result)

    | <matrix_literal>
    # [a, b, c]  <-- SAME AS ans = [a, b, c]
    # [1, 2, 3]  <-- SAME AS ans = [1, 2, 3]
    # --------------------------------------------------
    # _ans = !get_ans()
    # _nargsout = _ans.'get_nargs'() # always 1
    # _matrix_literal = !build_matrix_literal(elements)
    # _result = _matrix_literal.'get_result'(_nargsout)
    # _ans.'assign_result'(_result)

    | <accessor>
    # foo     <-- SAME AS ans = foo
    # foo x   <-- SAME AS ans = foo x
    # foo(x)  <-- SAME AS ans = foo(x)
    # --------------------------------------------------
    # _ans = !get_ans()
    # _nargsout = _ans.'get_nargs'()
    # _matrix_literal = !build_matrix_literal(elements)
    # _result = _matrix_literal.'get_result'(_nargsout)
    # _ans.'assign_result'(_result)
}
# Steps in performing an assignment
# 1) Build the left-hand accessor object
# 2) Get nargout from left-hand accesor
# 3) Build the right-hand accessor object
# 4) Call right-hand accessor with nargout. Produce result object
# 5) Unpack result object into left-hand accessor object

rule accessor {
    | <name> '(' <args> ')'
    | <name>
}
#_accessor = !build_accessor(args)

rule matrix_literal {
    '[' <elements> ']'
}
_matrix_literal = !build_matrix_literal(elements)